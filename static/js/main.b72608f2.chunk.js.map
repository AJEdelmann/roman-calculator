{"version":3,"sources":["utils/convert.js","components/Button.js","components/Display.js","components/Calculator.js","components/Instructions.js","components/App.js","index.js"],"names":["mapNumbers","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","toRoman","number","numRoman","Object","keys","n","toNumber","roman","toUpperCase","indexOf","replace","Button","props","className","handleClick","error","data","style","pointerEvents","opacity","onClick","Display","history","children","length","Calculator","useState","input","setInput","setError","curNum","setCurNum","prevNum","setPrevNum","result","setResult","operator","setOperator","setHistory","handleInput","val","prevInput","clearInput","calculation","evaluate","operation","prevNumber","curNumber","useEffect","test","validateNumber","map","k","key","Instructions","countMessage","setCountMessage","bounce","setBounce","message","setMessage","footnote","setFootnote","prevCount","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b72608f2.chunk.js","sourcesContent":["const mapNumbers = {\n  M: 1000,\n  CM: 900,\n  D: 500,\n  CD: 400,\n  C: 100,\n  XC: 90,\n  L: 50,\n  XL: 40,\n  X: 10,\n  IX: 9,\n  V: 5,\n  IV: 4,\n  I: 1\n};\n\nexport const validateNumber = roman => {\n  let numRoman = roman.toUpperCase();\n  const pattern = /^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/;\n\n  if (!pattern.test(numRoman)) {\n    return \"Invalid Roman numeral\";\n  }\n};\n\nexport const toRoman = number => {\n  if (number > 3999) {\n    return \"Tooooo much\";\n  } else if (number < 1) {\n    return \"Romans are positive!\";\n  }\n  let numRoman = \"\";\n\n  for (let n of Object.keys(mapNumbers)) {\n    while (number >= mapNumbers[n]) {\n      numRoman += n;\n      number -= mapNumbers[n];\n    }\n  }\n  return numRoman;\n};\n\nexport const toNumber = roman => {\n  let number = 0;\n  let numRoman = roman.toUpperCase();\n\n  for (let n of Object.keys(mapNumbers)) {\n    while (numRoman.indexOf(n) === 0) {\n      number += mapNumbers[n];\n      numRoman = numRoman.replace(n, \"\");\n    }\n  }\n  return number;\n};\n","import React from \"react\";\n\nconst Button = props => {\n  const { className, handleClick, error, data } = props;\n  return (\n    <div\n      className={className}\n      style={error ? { pointerEvents: \"none\", opacity: \"0.2\" } : null}\n      onClick={() => handleClick(data)}\n    >\n      <p className=\"p-operator\">{data}</p>\n    </div>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\n\nconst Display = props => {\n  const { error, history } = props;\n  return (\n    <div className={`display-wrapper ${error ? \"display-error\" : \"\"} `}>\n      <div className=\"display-history\">{history}</div>\n      <div className=\"display-error-message\">{error}</div>\n      <div\n        className={\n          \"display-number\" + (props.children.length > 7 ? \" small\" : \"\")\n        }\n      >\n        {props.children}\n      </div>\n    </div>\n  );\n};\n\nexport default Display;\n","import React, { useState, useEffect } from \"react\";\nimport { validateNumber, toRoman, toNumber } from \"../utils/convert\";\nimport Button from \"./Button\";\nimport Display from \"./Display\";\n\nconst Calculator = () => {\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [curNum, setCurNum] = useState(\"\");\n  const [prevNum, setPrevNum] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const [operator, setOperator] = useState(\"\");\n  const [history, setHistory] = useState(\"\");\n\n  // Data for rendering the buttons\n  const numbersKeys = [\"C\", \"D\", \"M\", \"V\", \"X\", \"L\", \"CE\", \"I\", \"=\"];\n  const operatorsKeys = [\"+\", \"-\", \"×\"];\n\n  const handleInput = val => {\n    // To clean the display automatically if you start typing a number after an operation\n    if (result && result === input) {\n      setInput(\"\");\n    }\n    setInput(prevInput => prevInput + val);\n  };\n\n  const clearInput = () => {\n    setInput(\"\");\n    setHistory(\"\");\n  };\n\n  // Input manipulation triggered after user click an operator\n  const calculation = operator => {\n    setPrevNum(input);\n    setInput(\"\");\n    setOperator(operator);\n    setHistory(`${history} ${input} ${operator} `);\n  };\n\n  const evaluate = () => {\n    const prevNumber = toNumber(prevNum);\n    const curNumber = toNumber(curNum);\n    let operation;\n\n    if (operator === \"+\") {\n      operation = toRoman(prevNumber + curNumber);\n    } else if (operator === \"-\") {\n      operation = toRoman(prevNumber - curNumber);\n    } else if (operator === \"×\") {\n      operation = toRoman(prevNumber * curNumber);\n    } else {\n      // In case the user click the equal button without previously selecting an operator\n      operation = toRoman(curNumber);\n    }\n    setResult(operation);\n    setInput(operation);\n    setOperator(\"\");\n    setHistory(`${history} ${input}`);\n  };\n\n  useEffect(() => {\n    setError(validateNumber(input));\n    setCurNum(input);\n  }, [input]);\n\n  return (\n    <div className=\"calculator instructions-bounce \">\n      <Display error={error} history={history}>\n        {input}\n      </Display>\n\n      <div className=\"numbers-wrapper\">\n        {numbersKeys.map(k => {\n          return (\n            <Button\n              data={k}\n              key={k}\n              error={k !== \"CE\" ? error : null}\n              handleClick={\n                k === \"CE\" ? clearInput : k === \"=\" ? evaluate : handleInput\n              }\n              className={`button ${\n                k === \"=\" || k === \"CE\" ? \"utility\" : \"number\"\n              } ${k === \"CE\" ? \"ce\" : \"\"}`}\n            >\n              {k}\n            </Button>\n          );\n        })}\n      </div>\n      <div className=\"operators-wrapper\">\n        {operatorsKeys.map(k => {\n          return (\n            <Button\n              key={k}\n              error={error}\n              className=\"button operator\"\n              handleClick={calculation}\n              data={k}\n            ></Button>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n","import React, { useState, useEffect } from \"react\";\n\nconst Instructions = () => {\n  const [countMessage, setCountMessage] = useState(0);\n  const [bounce, setBounce] = useState(false);\n  const [message, setMessage] = useState(\"Saluto romano!\");\n  const [footnote, setFootnote] = useState(\n    `Click here if you want to know more about this calculator.`\n  );\n\n  useEffect(() => {\n    setBounce(() => true);\n  }, []);\n\n  const updateMessage = () => {\n    setBounce(false);\n\n    switch (countMessage) {\n      case 0:\n        setMessage(\"Habemus Calculator\");\n        setFootnote(\n          \"With this calculator you will be able to perform some operations with Roman numerals.\"\n        );\n        setCountMessage(prevCount => prevCount + 1);\n        break;\n\n      case 1:\n        setMessage(\"Remember\");\n        setFootnote(\"There is no zero nor negative numbers in Roman numerals.\");\n        setCountMessage(prevCount => prevCount + 1);\n        break;\n\n      case 2:\n        setMessage(\"Don't forget the rules\");\n        setFootnote(\n          \"In standard Roman numerals we should not use more than three consecutive copies of the same letter. V, L and D are not repeated at all.\"\n        );\n        setCountMessage(prevCount => prevCount + 1);\n        break;\n\n      case 3:\n        setMessage(\"It's worth recalling that...\");\n        setFootnote(\n          \"The traditional Roman numeral system was used for numbers only up to 3,999. We are following this rule here.\"\n        );\n        setCountMessage(prevCount => prevCount + 1);\n        break;\n\n      case 4:\n        setMessage(\"Have fun!\");\n        setFootnote(\"Click if you want to repeat the instructions\");\n        setCountMessage(0);\n        break;\n\n      default:\n    }\n  };\n\n  return (\n    <div className=\"instructions-box\" onClick={updateMessage}>\n      <div className={`instructions ${bounce ? `instructions-bounce` : null}`}>\n        <h5 className=\"instructions-title\">{message}</h5>\n        {footnote && <span className=\"instructions-text\">{footnote}</span>}\n      </div>\n    </div>\n  );\n};\n\nexport default Instructions;\n","import React from \"react\";\nimport Calculator from \"./Calculator\";\nimport Instructions from \"./Instructions\";\nimport \"../styles/App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"main-container fade-in\">\n      <header className=\"header\">ROMAN CALCULATOR</header>\n      <Calculator />\n      <Instructions />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}